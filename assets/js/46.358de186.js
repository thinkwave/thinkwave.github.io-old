(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{528:function(i,a,r){"use strict";r.r(a);var t=r(4),e=Object(t.a)({},(function(){var i=this,a=i.$createElement,r=i._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[r("h1",{attrs:{id:"spring-cloud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud"}},[i._v("#")]),i._v(" Spring Cloud")]),i._v(" "),r("h2",{attrs:{id:"hystrix"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix"}},[i._v("#")]),i._v(" Hystrix")]),i._v(" "),r("ul",[r("li",[i._v("Netflix가 만든 Fault Tolerance Library")]),i._v(" "),r("li",[i._v("장애 전파 방지 & Resilience")])]),i._v(" "),r("h3",{attrs:{id:"주요-기능"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#주요-기능"}},[i._v("#")]),i._v(" 주요 기능")]),i._v(" "),r("ol",[r("li",[i._v("Circuit Breaker")]),i._v(" "),r("li",[i._v("Fallback")]),i._v(" "),r("li",[i._v("Thread Isolation")]),i._v(" "),r("li",[i._v("Timeout")])]),i._v(" "),r("h3",{attrs:{id:"적용하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#적용하기"}},[i._v("#")]),i._v(" 적용하기")]),i._v(" "),r("ol",[r("li",[i._v("Hystrix Command 상속"),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v("public class TestCommand extends HystrixCommand<String> {\n    @Override\n    protected String run() {\n        // Rest API로 서버 호출\n    }\n}\n")])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br"),r("span",{staticClass:"line-number"},[i._v("5")]),r("br"),r("span",{staticClass:"line-number"},[i._v("6")]),r("br")])])]),i._v(" "),r("li",[i._v("Hystrix Annotation 사용"),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v("@HystrixCommand\npublic String callApi() {\n    // Rest API로 서버 호출\n}\n")])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br")])])])]),i._v(" "),r("h3",{attrs:{id:"원리"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#원리"}},[i._v("#")]),i._v(" 원리")]),i._v(" "),r("ol",[r("li",[i._v("메소드를 Intercept하여 대신 실행\n"),r("ul",[r("li",[i._v("Thread Isolation")])])]),i._v(" "),r("li",[i._v("메소드 실행 후 성공, 실패, 예외 발생 여부를 기록하여 통계를 작성\n"),r("ul",[r("li",[i._v("Circuit Breaker : 통계에 따라서 Circuit Open 여부를 결정")])])]),i._v(" "),r("li",[i._v("예외가 발생한 경우는 사용자가 제공하여 메소드를 실행\n"),r("ul",[r("li",[i._v("Fallback")])])]),i._v(" "),r("li",[i._v("메소드가 종료되지 않으면 예외를 발생시킴\n"),r("ul",[r("li",[i._v("Timeout")])])])]),i._v(" "),r("h3",{attrs:{id:"circuit-breaker를-자세히-알아-보자"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#circuit-breaker를-자세히-알아-보자"}},[i._v("#")]),i._v(" Circuit Breaker를 자세히 알아 보자")]),i._v(" "),r("ol",[r("li",[i._v("설정")])]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v("hystrix.command.CommandKey.metrics.rollingState.timeInMilliseconds=10  # (1)\nhystrix.command.CommandKey.circuitBreaker.requestVolumeThreshold=20    # (2)\nhystrix.command.CommandKey.circuitBreaker.errorThresholdPercentage=50  # (3)\nhystrix.command.CommandKey.circuitBreaker.sleepWindowInMilliseconds=5  # (4)\n")])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br")])]),r("blockquote",[r("p",[i._v("10초간 20개 이상의 호출이 발생 한 경우, 50% 이상의 에러가 발생하면 5초간 Circuit Open")])]),i._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[i._v("Circuit Open(호출 차단)\n(1)일정 시간 동안 (2) 일정 개수 이상의 호출이 발생한 경우, (3) 일정 비율 이상의 에러가 발생한 경우")])]),i._v(" "),r("li",[r("p",[i._v("Circuit Close(호출 허용)\n(4)일정 시간 경과 후에 단 한개의 요청에 대해서 호출을 허용함(Half Open) 이 호출이 성공한 경우")])]),i._v(" "),r("li",[r("p",[i._v("Circuit Breaker의 단위\nCommandKey 단위로 생성 되어 통계를 내고 작동한다.")])])]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v('@HystrixCommand(commandKey="ExtDep1")\npublic String anyMethodWithExternalDependency() {\n    // 추천 서버 호출\n}\n')])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br")])]),r("h3",{attrs:{id:"hystrix-fallback"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-fallback"}},[i._v("#")]),i._v(" Hystrix - Fallback")]),i._v(" "),r("p",[i._v("Fallback으로 지정된 메소드는 다음의 경우에 원본 메소드 대신 실행한다.")]),i._v(" "),r("ol",[r("li",[i._v("Circuit Open")]),i._v(" "),r("li",[i._v("Any Exception(HystrixBadRequestException 제외)")])]),i._v(" "),r("ul",[r("li",[i._v("예외 발생시 무조건 Fallback은 실행")])]),i._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[i._v("Semaphore / ThreadPool Rejection")]),i._v(" "),r("li",[i._v("Timeout")])]),i._v(" "),r("blockquote",[r("p",[i._v("HystrixBadRequestException을 발생시키면, 이 오류는 Fallback을 실행하지 않으며, Circuit Open을 위한 통계에서도 집계되지 않는다.\nMethod Caller의 실수(ex 잘못된 파라미터의 전달)의 경우 HystrixBadRequestException을 Throw하게 작성 필요.")])]),i._v(" "),r("blockquote",[r("p",[i._v("만약 Caller의 실수를 다은 Exception으로 던진다면,")]),i._v(" "),r("ul",[r("li",[i._v("Circuit Breaker의 통계에 집계되어 Caller의 잘못으로 Circuit Open")]),i._v(" "),r("li",[i._v("Fallback이 실행되어, 개발과정에 오류를 인지하지 못할 수 있음.")])])]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v('@HystrixCommand(commandKey="ExtDep1",\n    fallbackMethod="recommendFallback")\npublic String anyMethodIwthExternalDependency() {\n    // 추천 서버 호출\n}\n\npublic String recommendFallback() {\n    return "<미리 준비된 상품 목록>";\n}\n')])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br"),r("span",{staticClass:"line-number"},[i._v("5")]),r("br"),r("span",{staticClass:"line-number"},[i._v("6")]),r("br"),r("span",{staticClass:"line-number"},[i._v("7")]),r("br"),r("span",{staticClass:"line-number"},[i._v("8")]),r("br"),r("span",{staticClass:"line-number"},[i._v("9")]),r("br")])]),r("h3",{attrs:{id:"hystrix-timeout"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-timeout"}},[i._v("#")]),i._v(" Hystrix - Timeout")]),i._v(" "),r("p",[i._v("Hystrix에서는 Circuit Breaker단위로(CommandKey 단위) Timeout을 설정할 수 있다.")]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v("hystrix.command.<commandKey>.execution.isolation.thread.timeoutInMilliseconds\n")])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br")])]),r("blockquote",[r("p",[i._v("Default 1초로 매우 짧으므로 유의 필요")])]),i._v(" "),r("h3",{attrs:{id:"hystrix-isolation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-isolation"}},[i._v("#")]),i._v(" Hystrix - Isolation")]),i._v(" "),r("p",[i._v("두가지 Isolation 방식을 Circuit Breaker별로 지정 가능")]),i._v(" "),r("ul",[r("li",[i._v("Semaphore")]),i._v(" "),r("li",[i._v("Thread(default)")])]),i._v(" "),r("ol",[r("li",[i._v("Semaphore Isolation\n"),r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/hystrix-semaphore-isolation.png",alt:"Semaphore Isolation"}}),i._v(" "),r("ul",[r("li",[i._v("Circuit Breaker 1개당 1개의 Semaphore 생성")]),i._v(" "),r("li",[i._v("Semaphore 별로 최대 동시 요청 개수 지정")]),i._v(" "),r("li",[i._v("최대 개수 초과시 Semaphore Rejection 발생 - FAllback 실행")]),i._v(" "),r("li",[i._v("Command를 호출한 Caller Thread에서 메소드 실행")]),i._v(" "),r("li",[i._v("Timeout이 제 시간에 발생하지 못함")])])]),i._v(" "),r("li",[i._v("Thread\n"),r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/hystrix-Thread-Isolation.png",alt:"Thread Isolation"}}),i._v(" "),r("ul",[r("li",[i._v("Circuit Breaker 별로 사용할 Thread Pool을 지정(ThreadPooKey)")]),i._v(" "),r("li",[i._v("Circut break : Thread Pool = N:1 관계 가능")]),i._v(" "),r("li",[i._v("최대 개수 초과시 Thread Pool Rejection 발생 - Fallback 실행")]),i._v(" "),r("li",[i._v("Command를 호출한 Thread가 아닌 Thread Pool에서 메소드 실행")])])])]),i._v(" "),r("blockquote",[r("p",[i._v("실제 메소드의 실행은 다른 Thread에서 실행되므로, Thread Local 사용 시 주의 필요")])]),i._v(" "),r("h3",{attrs:{id:"hystrix-isolation-in-spring-cloud-zuul"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-isolation-in-spring-cloud-zuul"}},[i._v("#")]),i._v(" Hystrix Isolation in Spring Cloud Zuul")]),i._v(" "),r("ol",[r("li",[i._v("Remainder\n"),r("ul",[r("li",[i._v("Hystrix Isolation은 Semaphore/Thread 두가지 모드가 있음.")]),i._v(" "),r("li",[i._v("Semaphore는 Circuit Break와 1:1")]),i._v(" "),r("li",[i._v("ThreadPool은 별도 부여된 ThreadPoolKey 단위로 생성된다")])])]),i._v(" "),r("li",[i._v("Spring cloud Zull에서 Hystrix Isolation은\n"),r("ul",[r("li",[i._v("Semaphore Isolation을 기본으로 한다.(Timeout이 없음)")]),i._v(" "),r("li",[i._v("Hystrix의 원래 Default는 Thread Isolation")])])])]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/hystrix-isolation-spring-cloud-zuul.png",alt:"zuul"}})]),i._v(" "),r("blockquote",[r("p",[i._v("Spring Cloud Zuul의 기본 설정으로는 Semaphore Isolation\n특정 API 군의 장애(지연)등이 발생하여도 Zuul 자체의 장애로 이어지지 않음")])]),i._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[i._v("Spring cloud Zull에서 Hystrix Isolation을 thread로 변경")])]),i._v(" "),r("ul",[r("li",[i._v("서버군(Service ID) 별로 Thread Pool을 분리")])]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/spring-cloud-zuul-thread.png",alt:"zuul-thread"}})]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v("zuul.threadPool.useSeparateThreadPools=true\nzuul.threadPool.threadPoolKeyPrefix=zuulgw\n")])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br")])]),r("h2",{attrs:{id:"ribbon"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ribbon"}},[i._v("#")]),i._v(" Ribbon")]),i._v(" "),r("p",[i._v("Netflix가 만든 Software Load Balancer를 내장한 RPC(REST) Library")]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/ribbon.png",alt:"ribbon"}})]),i._v(" "),r("p",[i._v("Client Load Balancer with HTTP Client")]),i._v(" "),r("h3",{attrs:{id:"ribbon-in-spring-cloud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ribbon-in-spring-cloud"}},[i._v("#")]),i._v(" Ribbon in Spring Cloud")]),i._v(" "),r("p",[i._v("Spring Cloud에서는 Ribbon 클러이언트를 사용자가 직접 사용하지 않음.")]),i._v(" "),r("ul",[r("li",[i._v("Spring Cloud의 HTTP 통신이 필요한 요소에 내장되어 있음\n"),r("ul",[r("li",[i._v("Zuul API Gateway")]),i._v(" "),r("li",[i._v("RestTemplate(@LoadBalanced)")]),i._v(" "),r("li",[i._v("Spring Cloud feign - 선언적 Http Client")])])])]),i._v(" "),r("h3",{attrs:{id:"ribbon이-기존-load-balancer와-다른-점"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ribbon이-기존-load-balancer와-다른-점"}},[i._v("#")]),i._v(" Ribbon이 기존 Load Balancer와 다른 점")]),i._v(" "),r("p",[i._v("Ribbon은 대부분 동작은 Programmable 하며, Spring Cloud에서는 아래와 같은 BeanType으로 개발자가 적용 가능.")]),i._v(" "),r("ol",[r("li",[i._v("IRule - 주어진 서버 목록에서 어떤 서버를 선택할 것인가")]),i._v(" "),r("li",[i._v("IPing - 각 서버가 살아 있는 가를 검사")]),i._v(" "),r("li",[r("code",[i._v("ServerList<Server>")]),i._v(" - 대상 서버 목록 제공")]),i._v(" "),r("li",[r("code",[i._v("ServerListFilter<Server>")]),i._v(" - 대상 서버들 중 호출할 대상 Filter")]),i._v(" "),r("li",[i._v("ServerListUpdater")]),i._v(" "),r("li",[i._v("IClientConfig")]),i._v(" "),r("li",[i._v("ILoadBalancer")])]),i._v(" "),r("h2",{attrs:{id:"eureka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka"}},[i._v("#")]),i._v(" Eureka")]),i._v(" "),r("p",[i._v("Netflix가 만든 Dynamic Service Discovery")]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/eureka.png",alt:"eureka"}})]),i._v(" "),r("ul",[r("li",[i._v("등록 : 서버가 자신의 서비스 이름(종류)과 IP주소, 포트를 등록")]),i._v(" "),r("li",[i._v("조회 : 서비스 이름(종류)을 갖고 서버 목록을 조회")])]),i._v(" "),r("h3",{attrs:{id:"eureka-in-spring-cloud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka-in-spring-cloud"}},[i._v("#")]),i._v(" Eureka in Spring Cloud")]),i._v(" "),r("p",[i._v("Eureka가 enalble된 Spring Cloud Application은")]),i._v(" "),r("ol",[r("li",[i._v("Server 시작시 Eureka 서버에 자동으로 자신의 상태 등록(up)")]),i._v(" "),r("li",[i._v("주기적 HeartBeat으로 Eureka Server에 자신이 살아 있음을 알림")]),i._v(" "),r("li",[i._v("Server 종료시 Eureka 서버에 자신의 상태 변경(down) 혹은 자신의 목록 삭제")]),i._v(" "),r("li",[i._v("Eureka 상에 등록된 이름은 "),r("code",[i._v("spring.application.name")])])]),i._v(" "),r("h3",{attrs:{id:"eureka-ribbon-in-spring-cloud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka-ribbon-in-spring-cloud"}},[i._v("#")]),i._v(" Eureka + Ribbon in Spring Cloud")]),i._v(" "),r("p",[i._v("하나의 서버에 Eureka Client와 Ribbon Client가 함께 설정되면 Spring Cloud는 다음의 Ribbon Bean을 대체")]),i._v(" "),r("ol",[r("li",[r("code",[i._v("ServerList<Server>")]),i._v(" "),r("ul",[r("li",[i._v("기본 : ConfigurationBasedServerList")]),i._v(" "),r("li",[i._v("변경 : DiscoveryEnalbedNIWSServerList")])])]),i._v(" "),r("li",[i._v("IPing\n"),r("ul",[r("li",[i._v("기본 : DummyPing")]),i._v(" "),r("li",[i._v("변경 : NIWSDiscoveryPing")])])])]),i._v(" "),r("blockquote",[r("p",[i._v("서버의 목록을 설정으로 명시하는 대신 Eureka를 통해서 Look Up되도록 변경")])]),i._v(" "),r("h2",{attrs:{id:"api-gateway"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#api-gateway"}},[i._v("#")]),i._v(" API Gateway")]),i._v(" "),r("p",[i._v("Hystrix + Ribbon + Eureka 를 잘 적용하면 MSA 환경에서 무리 없을거 같다?\nMSA 환경에서 API Gateway의 필요성")]),i._v(" "),r("ul",[r("li",[i._v("Single Endpoint 제공\n"),r("ul",[r("li",[i._v("API를 사용할 Client들은 API Gateway 주소만 인지")])])]),i._v(" "),r("li",[i._v("API의 공통 로직 구현\n"),r("ul",[r("li",[i._v("Logging, Authentication, Authorization")])])]),i._v(" "),r("li",[i._v("Traffic Control\n"),r("ul",[r("li",[i._v("API Quota, Throttling")])])])]),i._v(" "),r("h3",{attrs:{id:"spring-cloud-zuul"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-zuul"}},[i._v("#")]),i._v(" Spring Cloud Zuul")]),i._v(" "),r("p",[i._v("Spring Cloud Zuul은 API Routing은 Hystrix, Ribbon, Eureka를 통해서 구현")]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/zuul.png",alt:"zuul"}})]),i._v(" "),r("ul",[r("li",[i._v("Spring Cloud와 가장 잘 Integration 되어 있는 API Gateway")])]),i._v(" "),r("blockquote",[r("p",[i._v("API 요청 들은 각각 HystrixCommand를 통해서 실행되며, 각 API의 Routing은 Ribbon & Eureka의 조합으로 수행")])]),i._v(" "),r("h3",{attrs:{id:"hystrix-circuit-breaker-in-spring-cloud-zuul"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-circuit-breaker-in-spring-cloud-zuul"}},[i._v("#")]),i._v(" Hystrix Circuit Breaker in Spring Cloud Zuul")]),i._v(" "),r("p",[i._v("Reminder")]),i._v(" "),r("ul",[r("li",[i._v("Hystrix Circuit breaker는 CommandKey 이름 단위로 동작한다.")])]),i._v(" "),r("p",[i._v("Spring Cloud Zuul에서 Hystrix CommandKey는")]),i._v(" "),r("ul",[r("li",[i._v("각 서버군 이름(Zuul 용어로 Service ID, Eureka에 등록된 서버군 이름)이 사용 됨")]),i._v(" "),r("li",[i._v("앞선 그림을 예를 들면 3개의 CommandKey가 사용")])]),i._v(" "),r("h2",{attrs:{id:"server-to-server-호출-in-msa"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-to-server-호출-in-msa"}},[i._v("#")]),i._v(" Server to Server 호출 in MSA")]),i._v(" "),r("ul",[r("li",[i._v("MSA 플랫폼 외부의 호출은 API Gateway를 단일 창구로 사용.")]),i._v(" "),r("li",[i._v("내부의 API Server간의 호출은 직접 호출")]),i._v(" "),r("li",[i._v("Ribbon + Eureka 조합으로 Peer to Peer 호출")]),i._v(" "),r("li",[i._v("Spring Cloud에서는 다음의 Ribbon + Eureka 기반의 Http 호출 방법을 제공")])]),i._v(" "),r("ol",[r("li",[i._v("@LoadBalanced Rest Template\n"),r("ul",[r("li",[i._v("@LoadBalanced를 붙이는 경우 RestTemplate이 Ribbon + Eureka 기능을 갖게 됨")]),i._v(" "),r("li",[i._v("RestTemplate이 Bean으로 선언된 것만 적용 가능")])])]),i._v(" "),r("li",[i._v("Spring cloud Feign")])]),i._v(" "),r("h2",{attrs:{id:"spring-cloud-feign"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-feign"}},[i._v("#")]),i._v(" Spring Cloud Feign")]),i._v(" "),r("p",[i._v("Declarative Http client")]),i._v(" "),r("ul",[r("li",[i._v("Java Interface + Spring MVC Annotation 선언으로 Http 호출이 가능한 Spring Bean을 자동 생성")]),i._v(" "),r("li",[i._v("OpenFeign 기반의 Spring Cloud 확장")]),i._v(" "),r("li",[i._v("Hystrix + Ribbon + Eureka와 연동 되어 있음")])]),i._v(" "),r("ol",[r("li",[i._v("Ribbon + Eureka 없이 사용하기")])]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v('@FeignClient(name="product", url="http://localhost:8081")\npublic interface FeignProductRemoteService {\n   @RequestMapping(path="/product/{productId}")\n   String getProductInfo(@PathVariable("productId") String productId);\n}\n')])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br"),r("span",{staticClass:"line-number"},[i._v("5")]),r("br")])]),r("ol",{attrs:{start:"2"}},[r("li",[i._v("Ribbon + Eureka 연동")])]),i._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[i._v('@FeignClient(name="product")\npublic interface FeignProductRemoteService {\n   @RequestMapping(path="/product/{productId}")\n   String getProductInfo(@PathVariable("productId") String productId);\n}\n')])]),i._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[i._v("1")]),r("br"),r("span",{staticClass:"line-number"},[i._v("2")]),r("br"),r("span",{staticClass:"line-number"},[i._v("3")]),r("br"),r("span",{staticClass:"line-number"},[i._v("4")]),r("br"),r("span",{staticClass:"line-number"},[i._v("5")]),r("br")])]),r("h3",{attrs:{id:"spring-cloud-feign-with-hystrix"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-feign-with-hystrix"}},[i._v("#")]),i._v(" Spring Cloud Feign with Hystrix")]),i._v(" "),r("p",[i._v("Hystrix 연동하기")]),i._v(" "),r("ul",[r("li",[i._v("Hystrix가 Classpath에 존재")]),i._v(" "),r("li",[i._v("feign.hystrix.enabled=true")])]),i._v(" "),r("h2",{attrs:{id:"_11st-with-spring-cloud"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11st-with-spring-cloud"}},[i._v("#")]),i._v(" 11st with Spring Cloud")]),i._v(" "),r("ul",[r("li",[i._v("모든 MSA Platform 내의 서버는 Eureka Client를 탑재")]),i._v(" "),r("li",[i._v("API Server들간의 호출도 Spring Cloud Feign을 통해 Hystrix + Ribbon + Eureka 조합으로 호출")])]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/11st-spring-cloud.png",alt:"11st"}})]),i._v(" "),r("h2",{attrs:{id:"spring-cloud-config"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-config"}},[i._v("#")]),i._v(" Spring Cloud Config")]),i._v(" "),r("ul",[r("li",[i._v("Git 기반의 Config 관리")]),i._v(" "),r("li",[i._v("플랫폼 내의 모든 Server들은 Config Client를 탑재")]),i._v(" "),r("li",[i._v("서버 시작시 Config 서버가 제공하는 Config들이 PropertSource로 등록됨")]),i._v(" "),r("li",[i._v("Git REPOSITORY 내의 Config 파일들은 다양하게 구성 가능\n"),r("ul",[r("li",[i._v("전체 서버 공통 Config")]),i._v(" "),r("li",[i._v("서버군의 Config")]),i._v(" "),r("li",[i._v("특정 서버용 Config")])])])]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/spring-cloud-config.png",alt:"config"}})]),i._v(" "),r("blockquote",[r("p",[i._v("Spring Cloud Config에서 가져오는 Config을 가장 우선순위로 가짐(System Config 보다)\n우선 순위는 조정 가능.")])]),i._v(" "),r("h2",{attrs:{id:"모티터링"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#모티터링"}},[i._v("#")]),i._v(" 모티터링")]),i._v(" "),r("p",[i._v("MSA 운영 환경을 위한 전용 모니터링 도구들")]),i._v(" "),r("ul",[r("li",[i._v("Zipkin")]),i._v(" "),r("li",[i._v("Turbine")]),i._v(" "),r("li",[i._v("Spring Boot Admin")])]),i._v(" "),r("h3",{attrs:{id:"spring-cloud-sleuth"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-sleuth"}},[i._v("#")]),i._v(" Spring Cloud Sleuth")]),i._v(" "),r("ul",[r("li",[i._v("서버간의 Trace 정보의 전달은 사용 Protocol의 헤더를 통해서 전달 필요\n"),r("ul",[r("li",[i._v("ex) Http Header")])])]),i._v(" "),r("li",[i._v("Spring Cloud에서 제공하는 Distributed Tracing 솔루션")]),i._v(" "),r("li",[i._v("대부분 내외부 호출 구간에서 Trace정보를 생성 및 전달")]),i._v(" "),r("li",[i._v("Log에 남기거나 수집서버(Zipkin)에 전송하여검색/시각화")]),i._v(" "),r("li",[i._v("Zuul, Servlet, ResTemplate, Hystrix, Feign, RxJav등을 지원")]),i._v(" "),r("li",[i._v("Sleuth는 DB 호출 구간은 표현 안되므로 Spring AOP를 사용하여 Sleuth API로 Trace 정보를 직접 생성")])]),i._v(" "),r("p",[r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/tracing.png",alt:"tracing"}})]),i._v(" "),r("h3",{attrs:{id:"spring-cloud-sleuth-with-zipkin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud-sleuth-with-zipkin"}},[i._v("#")]),i._v(" Spring Cloud Sleuth with Zipkin")]),i._v(" "),r("p",[i._v("Sleuth로 생성한 trace를 시각화")]),i._v(" "),r("h3",{attrs:{id:"hystrix-모니터링-with-turbine"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hystrix-모니터링-with-turbine"}},[i._v("#")]),i._v(" Hystrix 모니터링 with Turbine")]),i._v(" "),r("ul",[r("li",[r("p",[i._v("실시간으로 모니터링 가능. 장애 발생시 과거 발생 시점은 볼 수 없음\n"),r("img",{attrs:{src:"2020-12-12-spring-cloud.assets/hystrix-monitoring.png",alt:"hystrix monitoring"}})])]),i._v(" "),r("li",[r("p",[i._v("과거 시점은 InfluxDB에 일주일치의 Hystrix Metrics 보관")]),i._v(" "),r("ul",[r("li",[i._v("Grafana를 통해 Dashbaord 구성")])])])]),i._v(" "),r("h3",{attrs:{id:"spring-boot-admin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-admin"}},[i._v("#")]),i._v(" Spring Boot Admin")]),i._v(" "),r("ul",[r("li",[i._v("Eureka에 등록되어 있는 모든 서버의 정보를 표시/제어")]),i._v(" "),r("li",[i._v("Spring Boot Acturator를 호출")])]),i._v(" "),r("h1",{attrs:{id:"참고"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#참고"}},[i._v("#")]),i._v(" 참고")]),i._v(" "),r("p",[r("a",{attrs:{href:"https://www.youtube.com/watch?v=J-VP0WFEQsY",target:"_blank",rel:"noopener noreferrer"}},[i._v("11번가 Spring Cloud 기반 MSA로의 전환 - 지난 1년간의 이야기"),r("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);